Same Origin Policy and CORS
    - Cross Origin Resource Sharing is a mechanism that allows sharing of resources accross origins. Ex: Images, Fonts, Scripts.
    - By default, javascript code can only communicate with a server with the same origin.
    - Origin: a 3-tuple containing protocol, port (if specified) and a host (for ex a server).
    - In the notes project, since the frontend is on port 3000 and the backend on port 3001, they do not have the same origin.

Using cors.
    - First install it within the project: npm i cors
    - import the node module using the require method. const cors = require('cors')
    - Use it as middlware by passing the cors method call into the app.use method.

Application to the internet:
    - Go through setup detailed on the heroku documentation.
    - Note: if you are not working on the main branch, instead of pushing directly to heroku as you would, do the following: git push heroku <branch name>:master.

Frontend Production Build:
    - To build a production version of the frontend, run the command npm run build.
    - All code from all the dependencies and our js code will be minified into one file.

Serving Static files from the backend:
    - copy file from frontend repo to backend repo using this command: cp -r <folder_to_be_coppied> <directory_to_copy_into>
    - Go back into the server and add more express middleware. In this case: app.use(express.static('build')) which checks the build directory for static files and returns those. HTTP requests to www.serversaddress.com/index.html or www.serversaddress.com will show the react front-end.
    - Change address in the frontend to be relative instead of fixed just for flexibility depending on where code is deployed.

Utilizing Node Scripts:
    - You can use nodes scripts to streamline deployment and building.
    - Ex Scripts from notes app:
        "build:ui": "rm -rf build && cd ../part2-notes/ && npm run build && cp -r build ../notes-backend",
        "deploy": "git push heroku main",
        "deploy:full": "npm run build:ui && git add . && git commit -m uibuild && npm run deploy",    
        "logs:prod": "heroku logs --tail"

Static Asset:
    - A file that is not directly associated with a web page or application.

Proxy:
    - React acts as a proxy in the case where we want to fetch a non-static asset. Setting up a proxy first allows react to check if a request is made for a static asset and if not, request from the user defined server.
    - In the package.json file, we add the following line: "proxy": "http://localhost:3001"

